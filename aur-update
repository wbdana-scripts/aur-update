#!/usr/bin/env bash

# "-a" switch for shell script example
# https://stackoverflow.com/questions/14447406/bash-shell-script-check-for-a-flag-and-grab-its-value
# Example with -a switch that requires an argument :

# #!/bin/bash

# while getopts ":a:" opt; do
#   case $opt in
#     a)
#       echo "-a was triggered, Parameter: $OPTARG" >&2
#       ;;
#     \?)
#       echo "Invalid option: -$OPTARG" >&2
#       exit 1
#       ;;
#     :)
#       echo "Option -$OPTARG requires an argument." >&2
#       exit 1
#       ;;
#   esac
# done
# Like greybot said(getopt != getopts) :

# The external command getopt(1) is never safe to use, unless you know it is GNU getopt, you call it in a GNU-specific way, and you ensure that GETOPT_COMPATIBLE is not in the environment. Use getopts (shell builtin) instead, or simply loop over the positional parameters.




LIGHTRED='\033[1;31m'
LIGHTGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHTCYAN='\033[1;36m'
WHITE='\033[1;37m'
NC='\033[0m'
MINI_SEPARATOR="=================="
END_SEPARATOR="============================="
LOGO="+=====================================================================================+
|    _____   ____ _____________           ____ ___            .___       __           |
|   /  _  \ |    |   \______   \         |    |   \______   __| _/____ _/  |_  ____   |
|  /  /_\  \|    |   /|       _/  ______ |    |   /\____ \ / __ |\__  \\   __ \/ __ \  |
| /    |    \    |  / |    |   \ /_____/ |    |  / |  |_> > /_/ | / __ \|  | \  ___/  |
| \____|__  /______/  |____|_  /         |______/  |   __/\____ |(____  /__|  \___  > |
|         \/                 \/                    |__|        \/     \/          \/  |
+=====================================================================================+"

# Print logo, initialization text
printf "${LIGHTCYAN}${LOGO}${NC}\n\n"
printf "${WHITE}By: wbdana\n"
printf "    https://github.com/wbdana/aur-update\n\n"
printf "Starting updates...\n${NC}"

# Declare a variable to hold the package list
pkg_list=""

# cd into AUR repository directory
cd ${aurpath}

for d in ./*/; do
	# Get current directory string length
	dir_name_len=${#d}
	# Remove './' from start of current directory
	pkg_name=$(for i in $d; do echo ${i:2:$dir_name_len}; done)
	# Get length of package name plus trailing '/'
	pkg_name_len=${#pkg_name}
	# Remove trailing '/'
	pkg_name=$(for i in $pkg_name; do echo ${i:0:$pkg_name_len - 1}; done)
	# Reset pkg_name_len to length of package name string
	pkg_name_len=${#pkg_name}

	# Add pkg_name to package list
	# echo $pkg_name >> aur-pkglist
	pkg_list=$(echo $pkg_list && echo && echo && echo $pkg_name)

	# cd into AUR package directory
	cd "$d"

	# Make a separator of length equal to
	# "//=> ${pkg_name} <=//"
	SEPARATOR_SIZE=`expr $pkg_name_len + 10`
	MED_SEPARATOR=""
	for i in $(seq 1 $SEPARATOR_SIZE); do
		MED_SEPARATOR+="="
	done

	# Print formatted directory info
	printf "${LIGHTCYAN}${MED_SEPARATOR}${NC}\n"		
	printf "${WHITE}//=>${NC} ${LIGHTRED}${pkg_name}${NC} ${WHITE}<=//${NC}\n"
	printf "${LIGHTCYAN}${MED_SEPARATOR}${NC}\n"
	printf "${YELLOW}pulling from git repository...${NC}\n"

	# Store results of git pull for formatted output
	pull=$(git pull)
	if [ "$pull" == "Already up to date." ]; then
		printf "${LIGHTGREEN}${pull}${NC}"
	elif [ "$pull" == *"fatal" ]; then
		printf "${LIGHTRED}${pull}${NC}"
	else
		printf "${LIGHTCYAN}${pull}${NC}"
	fi
	echo && echo # New lines

	# Get pkgver from PKGBUILD, excluding all but the first match
	new_version=$(cat PKGBUILD | grep -m 1 "pkgver=")
	# Strip "pkgver=" from version info
	new_version_len=${#new_version}
	new_version=$(for i in $new_version; do echo ${i:7:$new_version_len}; done)
	new_version_len=${#new_version}

	# Get currently installed package version from pacman
	pacman_output=$(pacman -Qm | grep $pkg_name)
	# Strip package name from version info
	current_version=${pacman_output:pkg_name_len}
	current_version_len=`echo -n $current_version | wc -m`

	# Remove trailing "-1", etc. from currently installed version info
	if [[ $current_version =~ .*-.* && "$current_version_len" -ne "$new_version_len" ]]; then
		diff=`expr $new_version_len - $current_version_len`
		current_version=${current_version:0:diff}
		current_version_len=`echo -n $current_version | wc -m`
	fi

	# If currently-installed version is the same as the new version,
	# offer to reinstall; otherwise, offer to update
	# Set verb variables accordingly
	printf "${LIGHTCYAN}New Version Number:${NC}     ${LIGHTGREEN}${new_version}${NC}\n"
	if [[ "$current_version" =~ "$new_version" ]]; then
		option="REINSTALL"
		opt_gerund="Reinstalling"
		printf "${LIGHTCYAN}Current Version Number:${NC}${LIGHTGREEN}${current_version}${NC}\n"
	else
		option="UPDATE"
		opt_gerund="Updating"
		printf "${LIGHTCYAN}Current Version Number:${NC} ${YELLOW}${current_version}${NC}\n"
	fi
	echo # New line


	# Grab contents of PKGBUILD
	# and print for review
	printf "${LIGHTCYAN}${MINI_SEPARATOR}${NC}\n"
	printf "${WHITE}//=> ${NC}${LIGHTCYAN}PKGBUILD${NC}${WHITE} <=//${NC}\n"
	printf "${LIGHTCYAN}${MINI_SEPARATOR}${NC}\n"
	PKG=$(cat PKGBUILD)
	printf "${WHITE}${PKG}${NC}"
	echo && echo # New lines

	# Offer to reinstall or update package
	# 'Y' or 'y' will accept, any other keypress will reject
	if [[ $option == "UPDATE" ]]; then
		read -p "$(printf "${LIGHTGREEN}//=> ${NC}${WHITE}Would you like to${NC} ${LIGHTGREEN}${option}${NC} ${LIGHTRED}${pkg_name}${NC}${WHITE}?${NC} [Y/n] ")" -r
	else
		read -p "$(printf "${LIGHTGREEN}//=> ${NC}${WHITE}Would you like to${NC} ${LIGHTCYAN}${option}${NC} ${LIGHTRED}${pkg_name}${NC}${WHITE}?${NC} [Y/n] ")" -r
	fi
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		printf "${LIGHTGREEN}${opt_gerund} ${pkg_name}!${NC}\n"
		makepkg -sirc
	else
		# Convert opt_gerund to lower case
		opt_gerund=$(echo $opt_gerund | tr '[:upper:]' '[:lower:]')
		printf "${LIGHTRED}NOT ${opt_gerund} ${pkg_name}!${NC}\n\n"
	fi

	# Go back to top level directory for next iteration
	cd ..;
done

# Make package list and old package list files if they do not exist
# Convert package list to old package list
# Remake package list
touch ${aurpath}/aur-pkglist ${aurpath}/aur-pkglist.old
mv ${aurpath}/aur-pkglist ${aurpath}/aur-pkglist.old
touch ${aurpath}/aur-pkglist

# Add package list to new package list file
echo $pkg_list >> aur-pkglist

printf "${LIGHTCYAN}${END_SEPARATOR}${NC}\n"
printf "${WHITE}//=> ${LIGHTGREEN}AUR Update complete!${NC}${WHITE}<=//${NC}\n"
printf "${LIGHTCYAN}${END_SEPARATOR}${NC}\n"