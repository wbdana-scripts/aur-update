#!/usr/bin/env bash

LIGHTRED='\033[1;31m'
LIGHTGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHTCYAN='\033[1;36m'
WHITE='\033[1;37m'
NC='\033[0m'
MINI_SEPARATOR="=================="
END_SEPARATOR="============================="
SYNC_END_SEPARATOR="==================================="
LOGO="+=====================================================================================+
|    _____   ____ _____________           ____ ___            .___       __           |
|   /  _  \ |    |   \______   \         |    |   \______   __| _/____ _/  |_  ____   |
|  /  /_\  \|    |   /|       _/  ______ |    |   /\____ \ / __ |\__  \\   __ \/ __ \  |
| /    |    \    |  / |    |   \ /_____/ |    |  / |  |_> > /_/ | / __ \|  | \  ___/  |
| \____|__  /______/  |____|_  /         |______/  |   __/\____ |(____  /__|  \___  > |
|         \/                 \/                    |__|        \/     \/          \/  |
+=====================================================================================+"

# Print logo, initialization text
printf "${LIGHTCYAN}${LOGO}${NC}\n\n"
printf "${WHITE}By: wbdana\n"
printf "    https://github.com/wbdana/aur-update\n\n${NC}"

. ./loop_get_pkg_name_and_len.sh -- source-only
. ./make_separator.sh --source-only
. ./print_formatted_dir_info.sh --source-only
. ./git_pull.sh --source-only
. ./get_new_ver.sh --source-only
. ./get_current_ver.sh --source-only
. ./set_update_or_reinstall.sh --source-only
. ./print_pkgbuild.sh --source-only
. ./prompt_update_or_reinstall.sh --source-only
. ./update_aur_pkg.sh --source-only
. ./print_end_message.sh --source-only
. ./print_end_sync.sh --source-only
. ./init_pkg_list.sh --source-only
. ./add_pkg_name_to_pkg_list.sh --source-only
. ./sync_pkg_list.sh --source-only
. ./print_starting_updates.sh --source-only
. ./print_starting_only.sh --source-only
. ./print_starting_sync.sh --source-only
. ./print_installing_new.sh --source-only
. ./print_removing_package.sh --source-only
. ./print_removing_git.sh --source-only
. ./build_target_path.sh --source-only
. ./fetch_target.sh --source-only
. ./install_new.sh --source-only
. ./print_install_complete.sh --source-only
. ./print_removal_complete.sh --source-only
. ./loop_update_packages.sh --source-only
. ./determine_longest_package_name_len.sh --source-only
. ./list_installed.sh --source-only

# cd into AUR repository directory
cd "$aurpath"

# If no package has been specified by '-o' flag ($pkg_name is unset)
if [ -z $1 ]; then
	loop_update_packages
else
	while getopts hsblo:S:R: OPT; do
		case "$OPT" in
			h )
				printf "${LIGHTGREEN}Usage:${NC}\n"
				printf "${LIGHTCYAN}aur-update${NC}"
				printf "                      Update all packages${NC}\n"
				printf "${LIGHTCYAN}aur-update -S ${YELLOW}[${LIGHTRED}package-name${YELLOW}]${NC}"
				printf "    Install package-name${NC}\n"
				printf "${LIGHTCYAN}aur-update -R ${YELLOW}[${LIGHTRED}package-name${YELLOW}]${NC}"
				printf "    Uninstall package-name${NC}\n"
				printf "${LIGHTCYAN}aur-update -o ${YELLOW}[${LIGHTRED}package-name${YELLOW}]${NC}"
				printf "    Update only package-name${NC}\n"
				printf "${LIGHTCYAN}aur-update -b${NC}"
				printf "                   Update all packages, bypassing optional rebuilds${NC}\n"
				printf "${LIGHTCYAN}aur-update -s${NC}"
				printf "                   Update aur-pkglist with latest packages in aurpath directory${NC}\n"
				printf "${LIGHTCYAN}aur-update -h${NC}"
				printf "                   Print this message and exit${NC}\n"
				exit 0
			;;
			o )
				pkg_name=$OPTARG
				print_starting_only
				cd $pkg_name
				# Set pkg_name_len outside of loop_get_pkg_name_and_len
				pkg_name_len=${#pkg_name}
				update_aur_pkg
				print_end_message
				exit 0
			;;
			S )
				pkg_name=$OPTARG
				build_target_path
				fetch_target
				install_new
				sync_pkg_list
				print_install_complete
			;;
			R )
				pkg_name=$OPTARG
				print_removing_package
				sudo pacman -Rs $pkg_name
				print_removing_git
				rm -rf $pkg_name
				print_starting_sync
				sync_pkg_list
				print_removal_complete
				exit 0
			;;
			s )
				print_starting_sync
				init_pkg_list
				for d in ./*/; do
					loop_get_pkg_name_and_len
					add_pkg_name_to_pkg_list
				done
				sync_pkg_list
				print_end_sync
				exit 0
			;;
			b )
				bypass=true
				loop_update_packages
			;;
			l )
				list_installed
			;;
			\? )
				echo "Invalid option: $OPTARG" 1>&2
			;;
			: )
				echo "Invalid option: $OPTARG requires an argument" 1>&2
			;;
		esac
	done
fi
